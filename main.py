import os
import logging
import requests
from flask import Flask, request
from google.oauth2 import service_account
from google.auth.transport.requests import Request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–æ–≤–µ
logging.basicConfig(level=logging.INFO)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
PROJECT_ID = "freebot-461207"
CREDENTIALS_FILE = "/etc/secrets/freebot-461207-c76a09ed3cfa.json"
SCOPES = ["https://www.googleapis.com/auth/cloud-platform"]

# –ü—Ä–æ–≤–µ—Ä–∫–∏
if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –ª–∏–ø—Å–≤–∞ –≤ —Å—Ä–µ–¥–∞—Ç–∞.")

if not os.path.exists(CREDENTIALS_FILE):
    raise FileNotFoundError(f"‚ùå Service account —Ñ–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞: {CREDENTIALS_FILE}")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

# Google Credentials
credentials = service_account.Credentials.from_service_account_file(
    CREDENTIALS_FILE, scopes=SCOPES
)

def get_dialogflow_token():
    if not credentials.valid or credentials.expired:
        credentials.refresh(Request())
    return credentials.token

def detect_intent_text(text, session_id):
    token = get_dialogflow_token()
    url = f"https://dialogflow.googleapis.com/v2/projects/{PROJECT_ID}/agent/sessions/{session_id}:detectIntent"

    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json; charset=utf-8"
    }

    body = {
        "queryInput": {
            "text": {
                "text": text,
                "languageCode": "bg"
            }
        }
    }

        try:
        response = requests.post(url, headers=headers, json=body, timeout=5)
        print("üéØ Dialogflow status:", response.status_code)
        print("üéØ Dialogflow raw response:", response.text)

        if response.status_code != 200:
            return "ü§ñ –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å Dialogflow."

        print("üì¶ Dialogflow response JSON:", response.json())
        print("üì¶ FulfillmentText:", response.json().get("queryResult", {}).get("fulfillmentText"))

        return response.json().get("queryResult", {}).get("fulfillmentText", "ü§ñ –ù—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä.")


    except requests.RequestException as e:
        print("‚ö†Ô∏è Exception –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∫—ä–º Dialogflow:", e)
        return "ü§ñ –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å Dialogflow."

# Webhook –∑–∞ Telegram
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("üì• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç Telegram:", data)

    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text")

    if not chat_id or not text:
        print("‚ö†Ô∏è –õ–∏–ø—Å–≤–∞—â chat_id –∏–ª–∏ —Ç–µ–∫—Å—Ç.")
        return {"ok": True}

    reply = detect_intent_text(text, session_id=str(chat_id))

    requests.post(TELEGRAM_API_URL, json={
        "chat_id": chat_id,
        "text": reply
    }, timeout=5)

    return {"ok": True}

# –ü–∏–Ω–≥ —Ä–æ—É—Ç
@app.route("/", methods=["GET"])
def index():
    return "ü§ñ Bot is live!"

# –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ (–ª–æ–∫–∞–ª–Ω–æ)
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
